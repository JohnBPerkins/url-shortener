name: App Build

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    env:
      DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener
      IMAGE_TAG: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.4'

      - name: Install Go tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Install protoc & plugins
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Install k6
        run: |
          curl -sS https://dl.k6.io/key.gpg | sudo apt-key add -
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6

      - name: Generate gRPC code
        run: |
          mkdir -p gen
          protoc \
            --proto_path=proto \
            --go_out=paths=source_relative:gen \
            --go-grpc_out=paths=source_relative:gen \
            proto/shortener.proto

      - name: Run unit tests
        run: |
          golangci-lint run
          go test ./internal/service -short

      - name: Build Docker image
        run: |
          docker compose build app
          docker tag url-shortener-app:latest $DOCKERHUB_REPO:$IMAGE_TAG

      - name: Bring up Docker Compose services
        env:
          POSTGRES_USER:      ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD:  ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB:        ${{secrets.POSTGRES_DB}}
          GF_SECURITY_ADMIN_USER: ${{secrets.GF_SECURITY_ADMIN_USER}}
          GF_SECURITY_ADMIN_PASSWORD: ${{secrets.GF_SECURITY_ADMIN_PASSWORD}}
        run: |
          docker compose up -d --wait

      - name: Run integration tests
        env:
          DATABASE_DSN: postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}?sslmode=disable
          REDIS_ENDPOINT: localhost:6379
        run: |
          go test ./internal/service -tags=integration --timeout 5m

      - name: Run load tests
        run: |
          k6 run ./test/http_loadtest.js
          k6 run ./test/grpc_loadtest.js

      - name: Tear down Docker Compose
        run: |
          docker compose down --volumes

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2 

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: url-shortener
          IMAGE_TAG: ${{ github.sha }}

        run: |
          docker tag url-shortener-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag url-shortener-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT