name: App Build

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER:      ${{secrets.POSTGRES_USER}}
      POSTGRES_PASSWORD:  ${{secrets.POSTGRES_PASSWORD}}
      POSTGRES_DB:        ${{secrets.POSTGRES_DB}}
      GF_SECURITY_ADMIN_USER: ${{secrets.GF_SECURITY_ADMIN_USER}}
      GF_SECURITY_ADMIN_PASSWORD: ${{secrets.GF_SECURITY_ADMIN_PASSWORD}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.4'

      - name: Install Go tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Install protoc & plugins
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Install k6
        run: |
          curl -sS https://dl.k6.io/key.gpg | sudo apt-key add -
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6

      - name: Generate gRPC code
        run: |
          mkdir -p gen
          protoc \
            --proto_path=proto \
            --go_out=paths=source_relative:gen \
            --go-grpc_out=paths=source_relative:gen \
            proto/shortener.proto

      - name: Run unit tests
        run: |
          golangci-lint run
          go test ./internal/service -short

      - name: Build Docker image
        run: |
          docker compose build

      - name: Generate .env for Docker Compose
        run: |
          cat <<EOF > .env
          POSTGRES_USER=${POSTGRES_USER}
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          POSTGRES_DB=${POSTGRES_DB}
          GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
          GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
          EOF

      - name: Bring up Docker Compose services
        run: |
          docker compose --env-file .env up -d --wait

      - name: Dump Postgres logs on failure
        if: ${{ failure() }}
        run: |
          echo "=== Compose ps ==="
          docker compose ps
          echo
          echo "=== Postgres logs ==="
          docker compose logs db

      - name: Run integration tests
        env:
          DATABASE_DSN: postgres://shortener:password123@localhost:5432/shortener?sslmode=disable
          REDIS_ENDPOINT: localhost:6379
        run: |
          go test ./internal/service -tags=integration --timeout 5m

      - name: Run load tests
        run: |
          k6 run ./test/http_loadtest.js

      - name: Tear down Docker Compose
        run: |
          docker compose down --volumes

      # - name: Upload Docker image
      #   run: |
